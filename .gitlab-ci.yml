variables:
  GIT_CLONE_PATH: ${CI_BUILDS_DIR}/${CI_PROJECT_NAME}

stages:
   - build
   - test
   - html
   - deploy


image:
  name: iffregistry.fz-juelich.de/fleur/fleur:pgi
  entrypoint: ["/usr/bin/bash -c"]


build-gfortran-hdf5:
  image: iffregistry.fz-juelich.de/fleur/fleur:latest
  stage: build
  artifacts:
     paths:
       - build
     expire_in: 1h
  script:
    - cd $CI_PROJECT_DIR
    - ./configure.sh GITLAB
#    - FC=/usr/lib64/openmpi/bin/mpif90 ./configure.sh
    - cd build
    - make -j 2
#  only:
#    - schedules
#    - triggers
#    - web

.test-gfortran-hdf5: &test-gfortran-hdf5
  image: iffregistry.fz-juelich.de/fleur/fleur:latest
  stage: test
  dependencies:
    - build-gfortran-hdf5
  before_script:
    - echo -e "\e[0Ksection_start:`date +%s`:test-dependencies[collapsed=true]\r\e[0KInstalling Test system dependencies"
    - apt-get update
    - apt-get -yq install python3-pip
    - pip3 install pytest masci-tools
    - echo -e "\e[0Ksection_end:`date +%s`:test-dependencies\r\e[0K"
  script:
    - ulimit -s unlimited
    - export OMP_NUM_THREADS=2
    - export juDFT_MPI="mpirun -n {mpi_procs} --allow-run-as-root --mca btl vader,self"
    - cd $CI_PROJECT_DIR/build
    - mkdir -p Testing
#    - cd build
#    - CTEST_FLAGS="$(echo "$CI_JOB_NAME" | sed -rn 's/.*-([0-9]+)of([0-9]+)$/-I \1,,\2/p')"
#    - ctest $CTEST_FLAGS -j 1
#    - CTEST_FLAGS="$(echo "$CI_JOB_NAME" | sed -rn 's/.*-([0-9]+)of([0-9]+)$/ --testoffset=\1 --runevery=\2/p')"
#    - pytest $CTEST_FLAGS | tee $CI_PROJECT_DIR/build/Testing/pytest_session.stdout
    - export PYTEST_ADDOPTS="--test-summary-file=$CI_PROJECT_DIR/build/Testing/pytest_summary.out"
    - ./run_tests.sh | tee $CI_PROJECT_DIR/build/Testing/pytest_session.stdout
  artifacts:
    when: always
    paths:
      - build/Testing
#  only:
#    - schedules
#    - triggers
#    - web

test-gfortran-hdf5-1of3:
  <<: *test-gfortran-hdf5

#test-gfortran-hdf5-2of3:
#  <<: *test-gfortran-hdf5

#test-gfortran-hdf5-3of3:
#  <<: *test-gfortran-hdf5

build-gfortran-serial:
  image: iffregistry.fz-juelich.de/fleur/fleur:latest
  stage: build
  script:
    - cd $CI_PROJECT_DIR
    - ./configure.sh -l serial -mpi FALSE -hdf5 FALSE -cmake_opts -DFLEUR_USE_OPENMP=OFF
    - cd build.serial
    - make -j 2
  artifacts:
    paths:
      - build.serial
    expire_in: 1h
#  only:
#    - schedules
#    - triggers
#    - web

test-gfortran-serial:
  image: iffregistry.fz-juelich.de/fleur/fleur:latest
  stage: test
  dependencies:
    - build-gfortran-serial
  before_script:
    - echo -e "\e[0Ksection_start:`date +%s`:test-dependencies[collapsed=true]\r\e[0KInstalling Test system dependencies"
    - apt-get update
    - apt-get -yq install python3-pip
    - pip3 install pytest masci-tools
    - echo -e "\e[0Ksection_end:`date +%s`:test-dependencies\r\e[0K"
  script:
    - ulimit -s unlimited
    - cd $CI_PROJECT_DIR/build.serial
    - mkdir -p Testing
    - export PYTEST_ADDOPTS="--test-summary-file=$CI_PROJECT_DIR/build.serial/Testing/pytest_summary.out"
    - ./run_tests.sh -m serial | tee $CI_PROJECT_DIR/build.serial/Testing/pytest_session.stdout
#    - cd build.serial
#    - ctest -j 2
  artifacts:
    when: on_failure
    paths:
      - build.serial/Testing
  only:
    - schedules
    - triggers
    - web

pages:
  image: iffregistry.fz-juelich.de/fleur/fleur:latest
  stage: deploy
  needs: ["doxygen","gfortran-coverage"]
  script:
    - echo "HTML should be ready from cache..."
    - mv $CI_PROJECT_DIR/docs/Docu_main.html $CI_PROJECT_DIR/public/index.html
  environment:
     name: HTML-Pages
     url: https://fleur.iffgit.fz-juelich.de/fleur
  artifacts:
    paths:
      - public
  only:
    - web
    - schedules

doxygen:
  image: iffregistry.fz-juelich.de/fleur/fleur:latest
  stage: html
  needs: ["build-gfortran-hdf5"]
  script:
    - cd $CI_PROJECT_DIR/build ; make doc
    - mkdir ../public
    - mv docs/html/ ../public/doxygen
  artifacts:
    paths:
      - public
      - build/fleur
      - build/fleur_MPI
      - build/inpgen
  only:
    - web
    - schedules


build-pgi:
  image: iffregistry.fz-juelich.de/fleur/fleur:pgi
  stage: build
  artifacts:
     paths:
       - build.pgi
     expire_in: 1h
  script:
    - export FC=/opt/nvidia/hpc_sdk/Linux_x86_64/20.9/compilers/bin/nvfortran
    - export CC=/opt/nvidia/hpc_sdk/Linux_x86_64/20.9/compilers/bin/nvc
    - cd $CI_PROJECT_DIR; ./configure.sh -l pgi -cmake cmake3 ; cd build.pgi; make
  allow_failure: true
  only:
    - schedules
    - triggers
    - web


test-pgi:
  image: iffregistry.fz-juelich.de/fleur/fleur:pgi
  stage: test
  dependencies:
    - build-pgi
  before_script:
    - echo -e "\e[0Ksection_start:`date +%s`:test-dependencies[collapsed=true]\r\e[0KInstalling Test system dependencies"
    - apt-get update
    - apt-get -yq install python3-pip
    - pip3 install pytest masci-tools
    - echo -e "\e[0Ksection_end:`date +%s`:test-dependencies\r\e[0K"
  script:
    - export OMP_NUM_THREADS=2
    - export juDFT_MPI=time
    - cd $CI_PROJECT_DIR/build.pgi
    - mkdir -p Testing
    - export PYTEST_ADDOPTS="--test-summary-file=$CI_PROJECT_DIR/build.pgi/Testing/pytest_summary.out"
    - ./run_tests.sh | tee $CI_PROJECT_DIR/build.pgi/Testing/pytest_session.stdout
#build.pgi;ctest
  allow_failure: true
  artifacts:
    when: on_failure
    paths:
      - build.pgi/Testing
  only:
     - schedules
     - web
     - triggers


#build-intel-static:
#  image: iffregistry.fz-juelich.de/fleur/fleur:intel-static
#  stage: build
#  artifacts:
#     paths:
#       - build.intel-static
#     expire_in: 1h
#  script:
#    - set +e && source compilervars.sh intel64 && set -e
#    - ulimit -s unlimited
#    - cd /builds/fleur/fleur
#    - ./configure.sh -l intel-static INTEL_DOCKER_STATIC
#    - cd build.intel-static
#    - make -j 2
#  artifacts:
#    when: on_success
#    paths:
#    - build.intel-static/fleur_MPI
#    - build.intel-static/inpgen
#  allow_failure: true
#  only:
#    - web


build-intel:
  image: iffregistry.fz-juelich.de/fleur/fleur:intel-static
  stage: build
  artifacts:
     paths:
       - build.intel
     expire_in: 1h
  script:
    - set +e && source compilervars.sh intel64 && set -e
    - ulimit -s unlimited
    - cd $CI_PROJECT_DIR
    - CC=gcc FC=mpiifort CXX=mpicxx ./configure.sh -l intel
    - cd build.intel
    - make -j 2
  allow_failure: true
  only:
    - schedules
    - triggers
    - web


test-intel:
  image: iffregistry.fz-juelich.de/fleur/fleur:intel-static
  stage: test
  dependencies:
     - build-intel
  before_script:
    - echo -e "\e[0Ksection_start:`date +%s`:test-dependencies[collapsed=true]\r\e[0KInstalling Test system dependencies"
    - apt-get update
    - apt-get -yq install python3-pip
    - pip3 install pytest masci-tools
    - echo -e "\e[0Ksection_end:`date +%s`:test-dependencies\r\e[0K"
  script:
    - set +e && source compilervars.sh intel64 && set -e
    - ulimit -s unlimited
    - export OMP_NUM_THREADS=2
    - export juDFT_MPI=time
    - cd $CI_PROJECT_DIR/build.intel
    - mkdir -p Testing
    - export PYTEST_ADDOPTS="--test-summary-file=$CI_PROJECT_DIR/build.intel/Testing/pytest_summary.out"
    - ./run_tests.sh | tee $CI_PROJECT_DIR/build.intel/Testing/pytest_session.stdout
#/build.intel;ctest
  allow_failure: true
  artifacts:
    when: on_failure
    paths:
      - build.intel/Testing
#      - build.intel.debug/Testing/test.oldlogs
  only:
     - schedules
     - web
     - triggers

gfortran-coverage:
  image: iffregistry.fz-juelich.de/fleur/fleur:latest
  stage: html
  needs: []
  before_script:
    - echo -e "\e[0Ksection_start:`date +%s`:test-dependencies[collapsed=true]\r\e[0KInstalling Test system dependencies"
    - apt-get update
    - apt-get -yq install python3-pip
    - pip3 install pytest masci-tools
    - echo -e "\e[0Ksection_end:`date +%s`:test-dependencies\r\e[0K"
  script:
      - cd $CI_PROJECT_DIR; ./configure.sh -l coverage -flags --coverage GITLAB; cd build.coverage; make -j 4
      - lcov --capture --initial -d CMakeFiles -o baseline.info
      - ulimit -s unlimited
      - export juDFT_MPI="mpirun -n {mpi_procs} --allow-run-as-root "
      - mkdir -p Testing
      - export PYTEST_ADDOPTS="--test-summary-file=$CI_PROJECT_DIR/build.coverage/Testing/pytest_summary.out"
      - ./run_tests.sh | tee $CI_PROJECT_DIR/build.coverage/Testing/pytest_session.stdout
#ctest -I 1,45
      - lcov --capture  -d CMakeFiles -o after.info
      - lcov --add-tracefile baseline.info --add-tracefile after.info -o combined.info
      - genhtml combined.info --output-directory html_out
      - mkdir ../public;mv html_out ../public/coverage_html
  allow_failure: true
  artifacts:
    paths:
      - public
  environment:
    name: Coverage
    url: https://fleur.iffgit.fz-juelich.de/fleur/coverage_html
  only:
      - web
      - schedules


test-ctest-system-gfortran-hdf5:
  image: iffregistry.fz-juelich.de/fleur/fleur:latest
  stage: test
  dependencies:
    - build-gfortran-hdf5
  script:
    - ulimit -s unlimited
    - export OMP_NUM_THREADS=2
    - export juDFT_MPI="mpirun -n 2 --allow-run-as-root --mca btl vader,self"
    - cd $CI_PROJECT_DIR
    - cd build
    - CTEST_FLAGS=""
    # run all tests instead of some
    #"$(echo "$CI_JOB_NAME" | sed -rn 's/.*-([0-9]+)of([0-9]+)$/-I \1,,\2/p')"
    - ctest $CTEST_FLAGS -j 1
  artifacts:
    when: on_failure
    paths:
      - build/Testing
  only:
    - schedules
    - triggers
    - web

test-aiida-fleur-dev-gfortran-hdf5:
  # This is to test the develop executables and all test input files against
  # the develop branch of aiida-fleur. This will execute workflows regression tests
  # with the compiled fleur executable.
  image: iffregistry.fz-juelich.de/fleur/fleur:latest
  stage: test
  dependencies:
    - build-gfortran-hdf5
  variables:
    POSTGRES_DB: "postgres"
    POSTGRES_USER: "postgres"
    POSTGRES_PASSWORD: ''
    POSTGRES_HOST_AUTH_METHOD: trust
    RABBITMQ_DEFAULT_USER: guest
    RABBITMQ_DEFAULT_PASS: guest
  services:
    - postgres
    #:12.2-alpine
    - rabbitmq:latest

    #AMQP_URL: 'amqp://guest:guest@rabbitmq:5672'
  before_script:
    - echo -e "\e[0Ksection_start:`date +%s`:test-dependencies[collapsed=true]\r\e[0KInstalling Aiida-fleur system dependencies"
    - apt-get update
    - apt-get -yq install python3-pip
    # because aiida needs psql commands
    - apt-get -yq install postgresql-12
    - useradd -d /builds/${GITLAB_USER_LOGIN} -g users -M -N builder
    - chown -R builder:users .. /root $CI_PROJECT_DIR
    - su -p builder -c "pip3 install --upgrade wheel setuptools"
    - su -p builder -c "pip3 install pytest masci-tools"
    - su -p builder -c "pip3 install aiida-core"
    # needed for workflow tests
    - su -p builder -c "pip3 install git+https://github.com/aiidateam/aiida-testing.git@export_cache"
    #- pip3 install git+https://github.com/JuDFTteam/aiida-fleur.git@develop.[testing]
    - git clone https://github.com/JuDFTteam/aiida-fleur.git
    - chown -R builder:users aiida-fleur
    - cd aiida-fleur
    - git checkout develop
    - su -p builder -c "pip3 install .[testing]"
    - echo -e "\e[0Ksection_end:`date +%s`:test-dependencies\r\e[0K"
  script:
    - ulimit -s unlimited
    - export OMP_NUM_THREADS=2
    - export juDFT_MPI="mpirun -n 2 --allow-run-as-root --mca btl vader,self"
    # we are in aiida-fleur dir
    - pwd
    - psql -h "postgres" -U "$POSTGRES_USER" -d "$POSTGRES_DB" -c "SELECT 'OK' AS status;"
    - cd ./tests/
    # Maybe also copy all current input files from fleur tests to run them through
    # the auto generated tests
    # For the regression tests to use the fleur executable for now it needs to be in these folders
    - cp $CI_PROJECT_DIR/build/inpgen local_exe/inpgen && chmod +x local_exe/inpgen
    - cp $CI_PROJECT_DIR/build/fleur_MPI local_exe/fleur && chmod +x local_exe/fleur
    # run tests
    - su -p builder -c "export PATH=$PATH:/root/.local/bin && printenv PATH && reentry scan && ./run_all_cov.sh"
  allow_failure: true
#  artifacts:
#    when: on_failure
#    paths:
#      - build/Testing
#  only:
#    - schedules
#    - triggers
#    - web
#    # Add slack or mattermost message in aiida channel to notice this.
