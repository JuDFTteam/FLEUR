if(NOT WIN32)
  string(ASCII 27 Esc)
  set(CReset "${Esc}[m")
  set(Bold   "${Esc}[1m")
  set(Red    "${Esc}[31m")
  set(Green  "${Esc}[32m")
  set(BRed   "${Esc}[1;31m")
  set(BGreen "${Esc}[1;32m")
endif()


message("${BRed}\n\n************************Summary***************************${CReset}")
message("${Green}Compiler   : ${CReset} ${CMAKE_Fortran_COMPILER}")
message("${Green}Compiler ID: ${CReset} ${CMAKE_Fortran_COMPILER_ID}")
message("${Green}Flags      : ${CReset} ${CMAKE_Fortran_FLAGS}")
message("${Green}Use OpenMP : ${CReset} ${FLEUR_USE_OPENMP}")
message("${Green}Libraries  : ${CReset} ${FLEUR_LIBRARIES}")
message("\n${Red}These Libraries are required:${CReset}")
message("${Green}  XML Library         : ${CReset}    ${FLEUR_USE_XML}")
message("${Green}  LAPACK Library      : ${CReset}    ${FLEUR_USE_LAPACK}")
message("\n${Red}These Libraries are recommended:${CReset}")
message("These libraries are downloaded and compiled if not found \n(Use command line option to disable if required)")
if (FLEUR_COMPILE_HDF5)
  message("${Green}  HDF5 Library              : ${CReset}    ${FLEUR_USE_HDF5} (selfcompiled)")
else()
  message("${Green}  HDF5 Library              : ${CReset}    ${FLEUR_USE_HDF5}")
endif()
message("${Green}  MPI Library               : ${CReset}    ${FLEUR_USE_MPI}")
if (FLEUR_USE_MPI)
  if (FLEUR_COMPILE_SCALAPACK)
    message("${Green}    SCALAPACK Library       : ${CReset}    ${FLEUR_USE_SCALAPACK} (selfcompiled)")
  else()
    message("${Green}    SCALAPACK Library       : ${CReset}    ${FLEUR_USE_SCALAPACK}")
  endif()
  if (FLEUR_COMPILE_ELSI)
    message("${Green}    ELSI Library            : ${CReset}    ${FLEUR_USE_ELSI} (selfcompiled)")
  else()
    message("${Green}    ELSI Library            : ${CReset}    ${FLEUR_USE_ELSI}")
  endif()
endif()
message("\n${Red}These Libraries are optional:${CReset}")
message("${Green}  FFT from MKL              : ${CReset}    ${FLEUR_USE_FFTMKL}")
message("${Green}  FFT from FFTW             : ${CReset}    ${FLEUR_USE_FFTW}")
message("${Green}  SpFFT                     : ${CReset}    ${FLEUR_USE_SPFFT}")
message("${Green}  LibXC Library             : ${CReset}    ${FLEUR_USE_LIBXC}")
message("${Green}  ELPA (one node) Library   : ${CReset}    ${FLEUR_USE_ELPA_ONENODE}")
message("${Green}  Wannier90 1.2 Library     : ${CReset}    ${FLEUR_USE_WANN}")
message("${Green}  Wannier90-4   Library     : ${CReset}    ${FLEUR_USE_WANN4}")
message("${Green}  Wannier90-5   Library     : ${CReset}    ${FLEUR_USE_WANN5}")
message("${Green}  EDSolver Library          : ${CReset}    ${FLEUR_USE_EDSOLVER}")
message("${Green}  MAGMA Library             : ${CReset}    ${FLEUR_USE_MAGMA}")
message("${Green}  progress thread compiled  : ${CReset}    ${FLEUR_USE_PROG_THREAD}")
if (FLEUR_USE_MPI)
  message("${Green}    ChASE Library           : ${CReset}    ${FLEUR_USE_CHASE}")
endif()
message("${Green}  Compile GPU version       :  ${CReset}   ${FLEUR_USE_GPU}")
if (FLEUR_USE_GPU)
  message("${Green}  CuSolver Library        : ${CReset}    ${FLEUR_USE_CUSOLVER}")
endif()
message("\n")
message("${Green}Compile serial version      : ${CReset}    ${FLEUR_USE_SERIAL}")
message("${Green}Compile parallel version    : ${CReset}    ${FLEUR_USE_MPI}")
message("\n")
message("${Green}Git describe  : ${CReset}${git_describe}")
message("${Green}Git hash      : ${CReset}${git_hash}")
message("${Green}Doxygen   : ${CReset}${FLEUR_USE_DOXYGEN}")
message("${BRed}************************-------***************************${CReset}")
if (NOT FLEUR_USE_GITVERSION)
  message("\n${BRed}************************-------***************************${CReset}")
  message("${Red}You are not using a 'Git' version of FLEUR. This means that either")
  message("${Red}the git executable was not found on your system or")
  message("${Red}your version is not obtained by a git clone and thus not version controlled")
  message("${Red}We strongly recommended to use a 'Git' version as this enables additional functionality")
  message("${Red}Use 'git clone https://iffgit.fz-juelich.de/fleur/fleur' to obtain a 'Git' version.")
  message("${BRed}************************-------***************************${CReset}")
endif()

#some checks
if (NOT FLEUR_USE_XML)
    message("\n\n${BRed}************************ERROR***************************${CReset}")
    message(FATAL_ERROR "${BRed}No libxml2 Library found. This is required.${CReset}")
    message("\n\n${BRed}************************ERROR***************************${CReset}")
endif()
if (NOT FLEUR_USE_LAPACK)
    message("\n\n${BRed}************************ERROR***************************${CReset}")
    message(FATAL_ERROR "${BRed}No LAPACK Library found. This is required.${CReset}")
    message("\n\n${BRed}************************ERROR***************************${CReset}")
endif()

if (NOT (FLEUR_USE_SERIAL OR FLEUR_USE_MPI))
    message(FATAL_ERROR "You should either compile a parallel or serial version (or both)")
endif()

if (FLEUR_WARN_MESSAGE)
    message("${BRed}${FLEUR_WARN_MESSAGE}${CReset}")
    message("\n\n${BRed}************************End of Warnings***************************${CReset}")
endif()
