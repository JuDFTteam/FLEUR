#Cmake file for juropa
set(CMAKE_Fortran_COMPILER mpif90)
enable_language(Fortran)
set(Fleur_uses_serial FALSE)

if ((NOT DEFINED ENV{NO_HDF}) AND (DEFINED ENV{HDF5_ROOT})) 
  set (HDF5_INCL "-I$ENV{HDF5_ROOT}/include")
  set(HDF5_LIBS "-L$ENV{HDF5_ROOT}/lib -lhdf5_fortran -lhdf5 -lz")
  set(Fleur_uses_HDF5 TRUE)
  add_definitions(-DCPP_HDF)
else ()
  message("No hdf support found")
  message("You might want to set HDF5_ROOT")
endif ()

if (${CMAKE_Fortran_COMPILER} MATCHES ".*mpif90")
       set(Fleur_uses_MPI TRUE)
else ()
       set(Fleur_uses_MPI FALSE)
       message(FATAL_ERROR "No MPI found, your compiler should be set to mpif90 ...")
endif ()

set(LAPACK_LIBS "-mkl -lmatmul -openmp -lpthread")
set(CMAKE_Fortran_FLAGS "${HDF5_INCL} -mkl -warn nousage -assume byterecl -r8" )
set(CMAKE_Fortran_FLAGS_RELEASE " -O4 -g -openmp -xSSE3 -axSSE4.2 -parallel" )    
set(CMAKE_Fortran_FLAGS_DEBUG   " -O0 -g -openmp" )

if (DEFINED ENV{SCALAPACK_ROOT})
   set(Fleur_uses_SCALAPACK TRUE)
   set(LAPACK_LIBS "${LAPACK_LIBS} -L${SCALAPACK_ROOT}/lib  -lmkl_scalapack_lp64 -lmkl_blacs_intelmpi_lp64")
endif() 

if (DEFINED ENV{ELPA_ROOT})
    set(Fleur_uses_ELPA TRUE)
    set(LAPACK_LIBS "${LAPACK_LIBS} -L$ENV{ELPA_ROOT}/lib -lelpa_mt -lmkl_scalapack_lp64 -lmkl_blacs_intelmpi_lp64 -lstdc++")
    set(CMAKE_Fortran_FLAGS "${CMAKE_Fortran_FLAGS} -I$ENV{ELPA_ROOT}/include/elpa/modules")
endif()

if (DEFINED ENV{ELEMENTAL_ROOT})
   set(Fleur_uses_ELEMENTAL TRUE)
   set(LAPACK_LIBS "${LAPACK_LIBS} fleur_elemental.o -L$ENV{ELEMENTAL_ROOT}/lib -lelemental -lpmrrr -llapack-addons -lstdc++") 
endif()

if (${MPI_Fortran_FOUND})
  if (${CMAKE_Fortran_COMPILER} MATCHES ".*mpi.*")
       set(FLEUR_MPI TRUE)
  else (${CMAKE_Fortran_COMPILER} MATCHES ".*mpi.*")
       set(FLEUR_MPI FALSE)
       message("MPI found but your compiler should be set to mpif90, mpiifort ...")
  endif (${CMAKE_Fortran_COMPILER} MATCHES ".*mpi.*")
else (${MPI_Fortran_FOUND})
  set(FLEUR_MPI FALSE)
endif (${MPI_Fortran_FOUND})


add_definitions(-DCPP_IO -DCPP_DOUBLE -DCPP_APC)
