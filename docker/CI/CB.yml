perf-gfortran:
  image: iffregistry.fz-juelich.de/fleur/fleur:gfortran
  extends: .perf-generic
  tags:
    - iffcluster1703
  variables:
    BENCHER_TESTBED: GFortran-iffcluster
    OMP_NUM_THREADS: 16
  before_script:
    - cd $CI_PROJECT_DIR
    - VERBOSE=1 FLEUR_INCLUDEDIR="/opt/include /usr/include" FLEUR_LIBRARIES="-L/opt/lib;-ldl;-L/usr/lib;-L/usr/lib/x86_64-linux-gnu;-lscalapack-openmpi;-lfftw3" ./configure.sh -c mpi
    - cd build
    - VERBOSE=1 make -j 12
  rules:
    - if: $CI_TASKS =~ /CB/  


perf-intel:
  needs:
    - perf-gfortran
  image: iffregistry.fz-juelich.de/fleur/fleur:oneAPI
  extends: .perf-generic
  tags:
    - iffcluster1703
  variables:
    BENCHER_TESTBED: IFORT-iffcluster
    OMP_NUM_THREADS: 16
  before_script:
    - cd $CI_PROJECT_DIR
    - ./configure.sh -c auto
    - cd build
    - make -j 12
  rules:
      - if: $CI_TASKS =~ /CB/    


perf-intel-ifx:
  needs:
    - perf-intel
  image: iffregistry.fz-juelich.de/fleur/fleur:oneAPI
  extends: .perf-generic
  tags:
    - iffcluster1703
  variables:
    BENCHER_TESTBED: IFX-iffcluster
    OMP_NUM_THREADS: 16
  before_script:
    - cd $CI_PROJECT_DIR
    - FC=ifx ./configure.sh -c auto
    - cd build
    - make -j 12
  rules:
      - if: $CI_TASKS =~ /CB/    

perf-gpu:
  extends: .perf-generic
  tags:
    - rtx2080ti
  variables:
    BENCHER_TESTBED: GPU-iffcluster
    OMP_NUM_THREADS: 16
    LD_LIBRARY_PATH: /opt/nvidia_hpc_sdk/Linux_x86_64/23.9/cuda/12.2/targets/x86_64-linux/lib:${LD_LIBRARY_PATH}
  before_script:
    - cd $CI_PROJECT_DIR
    - LDFLAGS="-Wl,--copy-dt-needed-entries -llapack" FC=/opt/nvidia_hpc_sdk/Linux_x86_64/2023/compilers/bin/nvfortran ./configure.sh  -c auto -gpu acc:cc60 
    - cd build
    - make -j 12
    - curl --proto '=https' --tlsv1.2 -sSfL https://bencher.dev/download/install-cli.sh | sh
    - export PATH=${PATH}:${HOME}/.cargo/bin
  allow_failure: true
  rules:
    - if: $CI_TASKS =~ /CB/


.perf-generic:
  variables:
    BENCHER_HOST: https://iffbencher.fz-juelich.de:61016
    BENCHER_PROJECT: fleur
    BENCHER_API_TOKEN: $BENCHER_TOKEN
    BENCHER_ADAPTER: json
  script:
    - ulimit -s unlimited ; sh ./run_tests.sh -perf
    - cp Testing/performance/*/bencher.json .
    - echo "$CI_COMMIT_REF_NAME"
    - bencher run  --if-branch "$CI_COMMIT_REF_NAME" --else-if-branch "$CI_MERGE_REQUEST_TARGET_BRANCH_NAME" --endif-branch   --file bencher.json

