test-aiida-fleur-dev-gfortran-hdf5:
  # This is to test the develop executables and all test input files against
  # the develop branch of aiida-fleur. This will execute workflows regression tests
  # with the compiled fleur executable.
  image: iffregistry.fz-juelich.de/fleur/fleur:gfortran
  stage: test
  needs: 
    - build-gfortran-hdf5-serial
  variables:
    POSTGRES_DB: "postgres"
    POSTGRES_USER: "postgres"
    POSTGRES_PASSWORD: ''
    POSTGRES_HOST_AUTH_METHOD: trust
    RABBITMQ_DEFAULT_USER: guest
    RABBITMQ_DEFAULT_PASS: guest
    AIIDA_PROFILE: "test_default"
    AIIDA_EMAIL: "aiida@localhost"
    AIIDA_FIRST_NAME: "Giuseppe"
    AIIDA_LAST_NAME: "Verdi"
    AIIDA_INSTITUTION: "Khedivial"
    AIIDA_DB_BACKEND: "django"

  services:
    - postgres:12.2-alpine
    - rabbitmq:3.7

    #AMQP_URL: 'amqp://guest:guest@rabbitmq:5672'
  before_script:
    - echo -e "\e[0Ksection_start:`date +%s`:test-dependencies[collapsed=true]\r\e[0KInstalling Aiida-fleur system dependencies"
    - pip3 install --upgrade wheel setuptools
    - pip3 install pytest masci-tools
    - pip3 install aiida-core
    # needed for workflow tests
    - pip3 install git+https://github.com/JuDFTteam/aiida-testing.git@export_cache_config
    #- pip3 install git+https://github.com/JuDFTteam/aiida-fleur.git@develop.[testing]
    - git clone https://github.com/JuDFTteam/aiida-fleur.git
    - cd aiida-fleur
    # Remove cache dirs
    - git checkout develop
    - pip3 install .[testing]
    - rm -rf tests/workflows/calculations tests/workflows/caches
    - rm -rf tests/calculation/data_dir
    - mkdir -p tests/workflows/caches
    - masci-tools fleur-schema add ../src/fleur/io/xml/FleurInputSchema.xsd --overwrite
    - masci-tools fleur-schema add ../src/fleur/io/xml/FleurOutputSchema.xsd --overwrite
    - echo -e "\e[0Ksection_end:`date +%s`:test-dependencies\r\e[0K"
  script:
    - git log --pretty=oneline --abbrev-commit -n 1
    - ulimit -s unlimited
    - export OMP_NUM_THREADS=2
    - export juDFT_MPI="mpirun -n 2 --allow-run-as-root --mca btl vader,self"
    - export OMPI_ALLOW_RUN_AS_ROOT=1
    - export OMPI_ALLOW_RUN_AS_ROOT_CONFIRM=1
    # we are in aiida-fleur dir
    - pwd
    - cd ./tests/
    - export PATH=$PATH:/root/.local/bin
    - #reentry scan 
    - >
      verdi quicksetup --non-interactive
      --profile="${AIIDA_PROFILE}"
      --email="${AIIDA_EMAIL}"
      --first-name="${AIIDA_FIRST_NAME}"
      --last-name="${AIIDA_LAST_NAME}"
      --institution="${AIIDA_INSTITUTION}"
      --db-backend="${AIIDA_DB_BACKEND}"
      --db-host="postgres"
      --db-username="${POSTGRES_USER}"
      --db-password="${POSTGRES_PASSWORD}" || exit 1
    - verdi status || exit 1
    - export AIIDA_TEST_PROFILE="${AIIDA_PROFILE}"
    # Maybe also copy all current input files from fleur tests to run them through
    # the auto generated tests
    # For the regression tests to use the fleur executable for now it needs to be in these folders
    - cp $CI_PROJECT_DIR/build/inpgen local_exe/inpgen && chmod +x local_exe/inpgen
    - cp $CI_PROJECT_DIR/build/fleur local_exe/fleur && chmod +x local_exe/fleur
    - sed -i "s/\./${CI_PROJECT_DIR//\//\\/}\/aiida-fleur\/tests/g" .aiida-testing-config.yml
    - cat .aiida-testing-config.yml
    - ls -la local_exe/
    #Copy testfile for SCF workchain from fleur tests
    # - cp files/workflow_test_files/inp_scf.xml files/inpxml/Si/inp.xml
    # run tests
    - pytest --local-exe-hdf5 --mpl --cov-report=term-missing:skip-covered --cov=aiida_fleur --cov=tests --mock-regenerate-test-data --export-cache-allow-migration
  allow_failure: true
  artifacts:
    when: always
    paths:
      - aiida-fleur/tests/
  rules:
      - if: $CI_TASKS =~ /aiida/    
